import streamlit as st
import os
import pandas as pd
from datetime import datetime
import plotly.express as px
import pdfkit
from jinja2 import Template
import uuid
import os
import tempfile
from datetime import datetime, timedelta
import seaborn as sns
import matplotlib.pyplot as plt





# ==============================================================================
# ƒê·∫¢M B·∫¢O FILE 'a04ecaf1_1dae_4c90_8081_086cd7c7b725.py' N·∫∞NG C√ôNG TH∆Ø M·ª§C
# HO·∫∂C THAY TH·∫æ T√äN FILE N·∫æU B·∫†N ƒê√É ƒê·ªîI T√äN N√ì.
# ==============================================================================
from a04ecaf1_1dae_4c90_8081_086cd7c7b725 import (
    setup_paths, load_raw_data, read_configs,
    apply_filters, export_report, export_pdf_report,
    apply_comparison_filters, export_comparison_report, export_comparison_pdf_report
)
# ==============================================================================

script_dir = os.path.dirname(__file__)
csv_file_path = os.path.join(script_dir, "invited_emails.csv")

# G·ªçi h√†m setup_paths ngay t·ª´ ƒë·∫ßu ƒë·ªÉ path_dict c√≥ s·∫µn
path_dict = setup_paths()

# ==============================================================================
# KH·ªûI T·∫†O C√ÅC BI·∫æN TR·∫†NG TH√ÅI PHI√äN (SESSION STATE VARIABLES)
# ==============================================================================
if 'comparison_mode_select_tab_main' not in st.session_state:
    st.session_state.comparison_mode_select_tab_main = "Compare Projects in a Month"  # ho·∫∑c gi√° tr·ªã ph√π h·ª£p v·ªõi `display_options`
    
if 'comparison_mode' not in st.session_state:
    st.session_state.comparison_mode = "So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng" # Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p

if 'comparison_selected_years' not in st.session_state:
    st.session_state.comparison_selected_years = [datetime.now().year] # Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p

if 'comparison_selected_months' not in st.session_state:
    st.session_state.comparison_selected_months = [] # Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p

if 'comparison_selected_projects' not in st.session_state:
    st.session_state.comparison_selected_projects = [] # Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p

if 'comparison_selected_months_over_time' not in st.session_state:
    st.session_state.comparison_selected_months_over_time = [] # Kh·ªüi t·∫°o l√† m·ªôt danh s√°ch r·ªóng ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p

if 'selected_years' not in st.session_state: # V√≠ d·ª• cho b·ªô l·ªçc b√°o c√°o ti√™u chu·∫©n
    st.session_state.selected_years = [datetime.now().year]

if 'selected_months' not in st.session_state: # V√≠ d·ª• cho b·ªô l·ªçc b√°o c√°o ti√™u chu·∫©n
    st.session_state.selected_months = []

# Th√™m d√≤ng n√†y ƒë·ªÉ m·∫∑c ƒë·ªãnh ng√¥n ng·ªØ l√† ti·∫øng Anh
if 'selected_language' not in st.session_state:
    st.session_state.selected_language = "English"
    

# ---------------------------
# PH·∫¶N X√ÅC TH·ª∞C TRUY C·∫¨P
# ---------------------------

@st.cache_data
def load_invited_emails():
    try:
        df = pd.read_csv(csv_file_path, header=None, encoding='utf-8')
        # S·ª≠a l·ªói: Th√™m .str tr∆∞·ªõc .strip()
        emails = df.iloc[:, 0].astype(str).str.strip().str.lower().tolist()
        return emails
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file invited_emails.csv t·∫°i {csv_file_path}. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
        return []
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i file invited_emails.csv: {e}")
        return []

# T·∫£i danh s√°ch email ƒë∆∞·ª£c m·ªùi m·ªôt l·∫ßn
INVITED_EMAILS = load_invited_emails()

# H√†m ghi log truy c·∫≠p
def log_user_access(email):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {"Time": timestamp, "Email": email}
    if "access_log" not in st.session_state:
        st.session_state.access_log = []
    st.session_state.access_log.append(log_entry)

# Logic x√°c th·ª±c ng∆∞·ªùi d√πng
if "user_email" not in st.session_state:
    st.set_page_config(page_title="Triac Time Report", layout="wide")
    st.title("üîê Access authentication")
    email_input = st.text_input("üìß Enter the invited email to access:")

    if email_input:
        email = email_input.strip().lower()
        if email in INVITED_EMAILS:
            st.session_state.user_email = email
            log_user_access(email)
            st.success("‚úÖ Valid email! Entering application...")
            st.rerun()
        else:
            st.error("‚ùå Email is not on the invitation list.")
    st.stop() # D·ª´ng th·ª±c thi n·∫øu ch∆∞a x√°c th·ª±c

# ---------------------------
# PH·∫¶N GIAO DI·ªÜN CH√çNH C·ª¶A ·ª®NG D·ª§NG
# ---------------------------
# S·ª≠ d·ª•ng session_state ƒë·ªÉ l∆∞u tr·ªØ l·ª±a ch·ªçn ng√¥n ng·ªØ
if 'lang' not in st.session_state:
    st.session_state.lang = 'en' # M·∫∑c ƒë·ªãnh l√† ti·∫øng Anh

# C·∫•u h√¨nh trang (ch·ªâ ch·∫°y m·ªôt l·∫ßn sau khi x√°c th·ª±c)
st.set_page_config(page_title="Triac Time Report", layout="wide")

st.markdown("""
    <style>
        .report-title {font-size: 30px; color: #003366; font-weight: bold;}
        .report-subtitle {font-size: 14px; color: gray;}
        footer {visibility: hidden;}
    </style>
""", unsafe_allow_html=True)

# =====================================
# Kh·ªüi t·∫°o ng√¥n ng·ªØ v√† t·ª´ ƒëi·ªÉn vƒÉn b·∫£n
# =====================================
# T·ª´ ƒëi·ªÉn cho c√°c chu·ªói vƒÉn b·∫£n
TEXTS = {
    'en': {
        'app_title': "üìä Time Report Generator",
        'lang_select': "Select language:",
        'language_vi': "Ti·∫øng Vi·ªát",
        'language_en': "English",
        'template_not_found': "‚ùå Template file not found: {}. Please ensure the file is in the same directory as the application.",
        'failed_to_load_raw_data': "‚ö†Ô∏è Failed to load raw data. Please check the 'Raw Data' sheet in the template file and data format.",
        'loading_data': "üîÑ Loading data and configurations...",
        'tab_standard_report': "Standard Report",
        'tab_comparison_report': "Comparison Report",
        'tab_data_preview': "Data Preview",
        'standard_report_header': "Standard Time Report Configuration",
        'select_analysis_mode': "Select analysis mode:",
        'select_year': "Select year:",
        'select_months': "Select month(s):",
        'standard_project_selection_header': "Project Selection for Standard Report",
        'standard_project_selection_text': "Select projects to include (only 'yes' projects from template config will be included by default):",
        'generate_standard_report_btn': "üöÄ Generate Standard Report",
        'no_year_selected_error': "Please select a valid year to generate the report.",
        'no_project_selected_warning_standard': "Please select at least one project to generate the standard report.",
        'no_data_after_filter_standard': "‚ö†Ô∏è No data after filtering for the standard report. Please check your selections.",
        'latest_update_date': "Latest data update",
        'generating_excel_report': "Generating Excel report...",
        'excel_report_generated': "‚úÖ Excel Report generated: {}",
        'download_excel_report': "üì• Download Excel Report",
        'generating_pdf_report': "Generating PDF report...",
        'pdf_report_generated': "‚úÖ PDF Report generated: {}",
        'download_pdf_report': "üì• Download PDF Report",
        'failed_to_generate_excel': "‚ùå Failed to generate Excel report.",
        'failed_to_generate_pdf': "‚ùå Failed to generate PDF report.",
        'comparison_report_header': "Comparison Report Configuration",
        'select_comparison_mode': "Select comparison mode:",
        'compare_projects_month': "Compare Projects in a Month",
        'compare_projects_year': "Compare Projects in a Year",
        'compare_projects_over_time': "Compare Projects Over Time (Months/Years)",
        'filter_data_for_comparison': "Filter Data for Comparison",
        'select_years': "Select Year(s):",
        'select_months_comp': "Select Month(s):",
        'select_projects_comp': "Select Project(s):",
        'generate_comparison_report_btn': "üöÄ Generate Comparison Report",
        'no_data_after_filter_comparison': "‚ö†Ô∏è {}",
        'data_filtered_success': "‚úÖ Data filtered successfully for comparison.",
        'comparison_data_preview': "Comparison Data Preview",
        'generating_comparison_excel': "Generating Comparison Excel Report...",
        'compare_projects_month': "Compare multiple projects in a month",
        'compare_projects_year': "Compare multiple projects in a year",
        'compare_projects_over_time': "Compare multiple projects across months/years",
        'comparison_excel_generated': "‚úÖ Comparison Excel Report generated: {}",
        'download_comparison_excel': "üì• Download Comparison Excel",
        'generating_comparison_pdf': "Generating Comparison PDF Report...",
        'comparison_pdf_generated': "‚úÖ PDF Report generated: {}",
        'download_comparison_pdf': "üì• Download Comparison PDF",
        'failed_to_generate_comparison_excel': "‚ùå Failed to generate Comparison Excel report.",
        'failed_to_generate_comparison_pdf': "‚ùå Failed to generate Comparison PDF report.",
        'raw_data_preview_header': "Raw Input Data (First 100 rows)",
        'no_raw_data': "No raw data loaded.",
        'no_year_in_data': "No years in data to select.",
        'user_guide': "User Guide",
        'export_options': "Export Options",
        'export_excel_option': "Export as Excel (.xlsx)",
        'export_pdf_option': "Export as PDF (.pdf)",
        'report_button': "Generate report",
        'no_data': "No data after filtering",
        'report_done': "Report created successfully",
        'download_excel': "Download Excel",
        'download_pdf': "Download PDF",
        'warning_select_export_format': "Please select at least one report export format (Excel or PDF).",
        'error_generating_report': "An error occurred while generating the report. Please try again.",
        # Add new messages for "Compare One Project Over Time" mode
        'select_at_least_two_projects_warning': "Please select at least two projects for comparison.",
        'select_years_for_over_time_months': "Select the year(s) for comparison:",
        'select_months_for_single_year': "Select month(s) within the chosen year:",
        'comparison_over_years_note': "Note: You have selected multiple years. The report will compare the project's data across the selected years. Month selection will be ignored.",
        'comparison_over_months_note': "Note: The report will compare the project's data across the selected months in year {}.",
        'no_comparison_criteria_selected': "Please select at least one year or month for comparison.",
        'no_month_selected_for_single_year': "Please select at least one month when comparing a single project within a specific year.",
        'tab_help': "Help",
        'preview_charts_title': "üìä Preview Charts",
        "help_instruction_simple": "If you have any questions or need support, please email to Admin **ky@triaccomposites.com**. We will respond as soon as possible. Thank you!",
        'select_all_projects_checkbox': "Select all projects"
    },
    'vi': {
        'app_title': "üìä C√¥ng c·ª• t·∫°o b√°o c√°o th·ªùi gian",
        'lang_select': "Ch·ªçn ng√¥n ng·ªØ:",
        'language_vi': "Ti·∫øng Vi·ªát",
        'language_en': "English",
        'template_not_found': "‚ùå Kh√¥ng t√¨m th·∫•y file template: {}. Vui l√≤ng ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c v·ªõi ·ª©ng d·ª•ng.",
        'failed_to_load_raw_data': "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th√¥. Vui l√≤ng ki·ªÉm tra sheet 'Raw Data' trong file template v√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu.",
        'loading_data': "üîÑ ƒêang t·∫£i d·ªØ li·ªáu v√† c·∫•u h√¨nh...",
        'tab_standard_report': "B√°o c√°o ti√™u chu·∫©n",
        'tab_comparison_report': "B√°o c√°o so s√°nh",
        'tab_data_preview': "Xem tr∆∞·ªõc d·ªØ li·ªáu",
        'standard_report_header': "C·∫•u h√¨nh b√°o c√°o th·ªùi gian ti√™u chu·∫©n",
        'select_analysis_mode': "Ch·ªçn ch·∫ø ƒë·ªô ph√¢n t√≠ch:",
        'select_year': "Ch·ªçn nƒÉm:",
        'select_months': "Ch·ªçn th√°ng(c√°c th√°ng):",
        'standard_project_selection_header': "L·ª±a ch·ªçn d·ª± √°n cho b√°o c√°o ti√™u chu·∫©n",
        'standard_project_selection_text': "Ch·ªçn d·ª± √°n ƒë·ªÉ bao g·ªìm (m·∫∑c ƒë·ªãnh ch·ªâ bao g·ªìm c√°c d·ª± √°n 'yes' t·ª´ c·∫•u h√¨nh template):",
        'generate_standard_report_btn': "üöÄ T·∫°o b√°o c√°o ti√™u chu·∫©n",
        'no_year_selected_error': "Vui l√≤ng ch·ªçn m·ªôt nƒÉm h·ª£p l·ªá ƒë·ªÉ t·∫°o b√°o c√°o.",
        'no_project_selected_warning_standard': "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d·ª± √°n ƒë·ªÉ t·∫°o b√°o c√°o ti√™u chu·∫©n.",
        'no_data_after_filter_standard': "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc cho b√°o c√°o ti√™u chu·∫©n. Vui l√≤ng ki·ªÉm tra c√°c l·ª±a ch·ªçn c·ªßa b·∫°n.",
        'generating_excel_report': "ƒêang t·∫°o b√°o c√°o Excel...",
        'excel_report_generated': "‚úÖ B√°o c√°o Excel ƒë√£ ƒë∆∞·ª£c t·∫°o: {}",
        'download_excel_report': "üì• T·∫£i b√°o c√°o Excel",
        'generating_pdf_report': "ƒêang t·∫°o b√°o c√°o PDF...",
        'pdf_report_generated': "‚úÖ B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c t·∫°o: {}",
        'download_pdf_report': "üì• T·∫£i b√°o c√°o PDF",
        'failed_to_generate_excel': "‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o Excel.",
        'failed_to_generate_pdf': "‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o PDF.",
        'comparison_report_header': "C·∫•u h√¨nh b√°o c√°o so s√°nh",
        'select_comparison_mode': "Ch·ªçn ch·∫ø ƒë·ªô so s√°nh:",
        'compare_projects_month': "So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng",
        'compare_projects_year': "So S√°nh D·ª± √Ån Trong M·ªôt NƒÉm",
        'compare_projects_over_time': "So S√°nh Nhi·ªÅu D·ª± √Ån Qua C√°c Th√°ng/NƒÉm",
        'filter_data_for_comparison': "L·ªçc d·ªØ li·ªáu ƒë·ªÉ so s√°nh",
        'select_years': "Ch·ªçn nƒÉm(c√°c nƒÉm):", # D√πng chung cho c√°c mode
        'select_months_comp': "Ch·ªçn th√°ng(c√°c th√°ng):", # D√πng chung cho c√°c mode
        'select_projects_comp': "Ch·ªçn d·ª± √°n(c√°c d·ª± √°n):", # D√πng chung cho c√°c mode
        'generate_comparison_report_btn': "üöÄ T·∫°o b√°o c√°o so s√°nh",
        'no_data_after_filter_comparison': "‚ö†Ô∏è {}",
        'latest_update_date': "D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·∫øn ng√†y",
        'data_filtered_success': "‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc th√†nh c√¥ng cho so s√°nh.",
        'comparison_data_preview': "Xem tr∆∞·ªõc d·ªØ li·ªáu so s√°nh",
        'generating_comparison_excel': "ƒêang t·∫°o b√°o c√°o Excel so s√°nh...",
        'comparison_excel_generated': "‚úÖ B√°o c√°o Excel so s√°nh ƒë√£ ƒë∆∞·ª£c t·∫°o: {}",
        'download_comparison_excel': "üì• T·∫£i b√°o c√°o Excel so s√°nh",
        'generating_comparison_pdf': "ƒêang t·∫°o b√°o c√°o PDF so s√°nh...",
        'comparison_pdf_generated': "‚úÖ B√°o c√°o PDF so s√°nh ƒë√£ ƒë∆∞·ª£c t·∫°o: {}",
        'download_comparison_pdf': "üì• T·∫£i b√°o c√°o PDF so s√°nh",
        'failed_to_generate_comparison_excel': "‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o Excel so s√°nh.",
        'failed_to_generate_comparison_pdf': "‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o PDF so s√°nh.",
        'raw_data_preview_header': "D·ªØ li·ªáu ƒë·∫ßu v√†o th√¥ (100 h√†ng ƒë·∫ßu)",
        'no_raw_data': "Kh√¥ng c√≥ d·ªØ li·ªáu th√¥ ƒë∆∞·ª£c t·∫£i.",
        'no_year_in_data': "Kh√¥ng c√≥ nƒÉm n√†o trong d·ªØ li·ªáu ƒë·ªÉ ch·ªçn.",
        'user_guide': "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
        'export_options': "T√πy ch·ªçn xu·∫•t b√°o c√°o",
        'export_excel_option': "Xu·∫•t ra Excel (.xlsx)",
        'export_pdf_option': "Xu·∫•t ra PDF (.pdf)",
        'report_button': "T·∫°o b√°o c√°o",
        'no_data': "Kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc",
        'report_done': "ƒê√£ t·∫°o b√°o c√°o",
        'download_excel': "T·∫£i Excel",
        'download_pdf': "T·∫£i PDF",
        'warning_select_export_format': "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªãnh d·∫°ng xu·∫•t b√°o c√°o (Excel ho·∫∑c PDF).",
        'error_generating_report': "C√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.",
        # Th√™m c√°c tin nh·∫Øn m·ªõi cho mode "So S√°nh C√°c D·ª± √Ån Qua C√°c Th√°ng/NƒÉm"
        'select_at_least_two_projects_warning': "Vui l√≤ng ch·ªçn √≠t nh·∫•t hai d·ª± √°n ƒë·ªÉ so s√°nh.",
        'select_years_for_over_time_months': "Ch·ªçn nƒÉm (ho·∫∑c c√°c nƒÉm) b·∫°n mu·ªën so s√°nh:",
        'select_months_for_single_year': "Ch·ªçn th√°ng(c√°c th√°ng) trong nƒÉm ƒë√£ ch·ªçn:",
        'comparison_over_years_note': "L∆∞u √Ω: B·∫°n ƒë√£ ch·ªçn nhi·ªÅu nƒÉm. B√°o c√°o s·∫Ω so s√°nh d·ªØ li·ªáu c·ªßa d·ª± √°n qua c√°c nƒÉm ƒë√£ ch·ªçn. L·ª±a ch·ªçn th√°ng s·∫Ω b·ªã b·ªè qua.",
        'comparison_over_months_note': "L∆∞u √Ω: B√°o c√°o s·∫Ω so s√°nh d·ªØ li·ªáu c·ªßa d·ª± √°n qua c√°c th√°ng ƒë√£ ch·ªçn trong nƒÉm {}.",
        'no_comparison_criteria_selected': "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt nƒÉm ho·∫∑c m·ªôt th√°ng ƒë·ªÉ so s√°nh.",
        'no_month_selected_for_single_year': "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt th√°ng khi so s√°nh m·ªôt d·ª± √°n trong m·ªôt nƒÉm c·ª• th·ªÉ.",
        'tab_help': "Tr·ª£ gi√∫p",
        'preview_charts_title': "üìä Bi·ªÉu ƒë·ªì xem tr∆∞·ªõc",
        "help_instruction_simple": "N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng g·ª≠i email ƒë·∫øn Qu·∫£n tr·ªã vi√™n **ky@triaccomposites.com**. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t. Xin c·∫£m ∆°n!",
        'select_all_projects_checkbox': "Ch·ªçn t·∫•t c·∫£ d·ª± √°n"
    }
}

# L·∫•y t·ª´ ƒëi·ªÉn vƒÉn b·∫£n d·ª±a tr√™n l·ª±a ch·ªçn ng√¥n ng·ªØ hi·ªán t·∫°i
def get_text(key, lang=None):
    lang = lang or st.session_state.get("lang", "vi")
    val = TEXTS.get(lang, {}).get(key)

    if val is None:
        return f"Missing text for {key}"

    # ‚úÖ N·∫øu l√† tuple, ch·ªçn theo lang
    if isinstance(val, tuple):
        return val[0] if lang == 'vi' else val[1]

    return val

# Header c·ªßa ·ª©ng d·ª•ng
col_logo_title, col_lang = st.columns([0.8, 0.2])
with col_logo_title:
    st.image("triac_logo.png", width=110) # Logo c·ªë ƒë·ªãnh
    st.markdown("<div class='report-title'>Triac Time Report Generator</div>", unsafe_allow_html=True) # Ti√™u ƒë·ªÅ c·ªë ƒë·ªãnh
    st.markdown("<div class='report-subtitle'>Reporting tool for time tracking and analysis</div>", unsafe_allow_html=True) # Ph·ª• ƒë·ªÅ c·ªë ƒë·ªãnh

with col_lang:
    selected_lang = st.radio(
        "Select language:",
        options=['vi', 'en'],
        format_func=lambda x: "Ti·∫øng Vi·ªát" if x == "vi" else "English",
        key='language_selector_main'
    )
    if st.session_state.lang != selected_lang:
        st.session_state.lang = selected_lang
# Check if template file exists
if not os.path.exists(path_dict['template_file']):
    st.error(get_text('template_not_found').format(path_dict['template_file']))
    st.stop()

# Load raw data and configurations once
@st.cache_data(ttl=1800)
def cached_load():
    df_raw = load_raw_data(path_dict['template_file'])
    df = df_raw.copy()
    config_data = read_configs(path_dict['template_file'])
    return df_raw, config_data

with st.spinner(get_text('loading_data')):
    df_raw, config_data = cached_load()
    df = df_raw.copy()  # ‚úÖ TH√äM D√íNG N√ÄY ·ªü ƒë√¢y
# Hi·ªÉn th·ªã ng√†y c·∫≠p nh·∫≠t m·ªõi nh·∫•t
if 'Date' in df_raw.columns:
    latest_date = pd.to_datetime(df_raw['Date'], errors='coerce').max()
    if pd.notnull(latest_date):
        st.info(f"üìÖ {get_text('latest_update_date')}: {latest_date.strftime('%d/%m/%Y')}")
    else:
        st.warning(get_text('no_valid_dates_found'))
else:
    st.warning(get_text('date_column_missing'))

if df_raw.empty:
    st.error(get_text('failed_to_load_raw_data'))
    st.stop()
    
def create_hierarchy_chart(df_filtered, config=None):
    if not all(col in df_filtered.columns for col in ['Project name', 'Workcentre', 'Task', 'Job', 'Hours']):
        return None

    df_hierarchy = df_filtered.groupby(
        ['Project name', 'Workcentre', 'Task', 'Job']
    )['Hours'].sum().reset_index()

    fig = px.sunburst(
        df_hierarchy,
        path=['Project name', 'Workcentre', 'Task', 'Job'],
        values='Hours',
        title="üîç Ph√¢n C·∫•p Project ‚Üí Workcentre ‚Üí Task ‚Üí Job",
        template='plotly_white',
        color='Project name'
    )
    fig.update_layout(margin=dict(t=40, l=10, r=10, b=10))
    return fig

# Get unique years, months, and projects from raw data for selectbox options
all_years = sorted(df_raw['Year'].dropna().unique().astype(int).tolist())
month_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
all_months = [m for m in month_order if m in df_raw['MonthName'].dropna().unique()]
all_projects = sorted(df_raw['Project name'].dropna().unique().tolist())


# Main interface tabs
tab_dashboard_main, tab_standard_report_main, tab_comparison_report_main, tab_data_preview_main, tab_user_guide_main, tab_help_main = st.tabs([
    "üìà Dashboard",
    get_text('tab_standard_report'),
    get_text('tab_comparison_report'),
    get_text('tab_data_preview'),
    get_text('user_guide'),
    get_text("tab_help")
])
# Review charts
def create_monthly_chart(df_filtered, config):
    if 'MonthName' not in df_filtered.columns or 'Hours' not in df_filtered.columns:
        return None

    ordered_months = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ]

    df_month = (
        df_filtered.groupby('MonthName')['Hours']
        .sum()
        .reindex(ordered_months)
        .dropna()
        .reset_index()
    )

    fig = px.bar(
        df_month,
        x='MonthName',
        y='Hours',
        title="üìÜ Monthly Total Hours",
        color='MonthName',
        template='plotly_white'
    )
    fig.update_layout(xaxis_title="Month", yaxis_title="Hours")
    return fig

def create_task_chart(df_filtered, config):
    if 'Task' not in df_filtered.columns or 'Hours' not in df_filtered.columns:
        return None

    df_task = (
        df_filtered.groupby('Task')['Hours']
        .sum()
        .sort_values(ascending=False)
        .reset_index()
    )

    fig = px.bar(
        df_task,
        x='Hours',
        y='Task',
        orientation='h',
        title="üìã Total Hours by Task",
        color='Task',
        template='plotly_white'
    )
    fig.update_layout(xaxis_title="Hours", yaxis_title="Task")
    return fig

def create_workcentre_chart(df_filtered, config):
    if 'Workcentre' not in df_filtered.columns or 'Hours' not in df_filtered.columns:
        return None

    df_wc = (
        df_filtered.groupby('Workcentre')['Hours']
        .sum()
        .sort_values(ascending=False)
        .reset_index()
    )

    fig = px.bar(
        df_wc,
        x='Hours',
        y='Workcentre',
        orientation='h',
        title="üè≠ Total Hours by Workcentre",
        color='Workcentre',
        template='plotly_white'
    )
    fig.update_layout(xaxis_title="Hours", yaxis_title="Workcentre")
    return fig
# =========================================================================
# STANDARD REPORT TAB
# =========================================================================
with tab_standard_report_main:
    st.header(get_text('standard_report_header'))

    col1_std, col2_std, col3_std = st.columns(3)
    with col1_std:
        # State management for standard analysis mode
        if 'standard_analysis_mode' not in st.session_state:
            st.session_state.standard_analysis_mode = config_data['mode'] if config_data['mode'] in ['year', 'month', 'week'] else 'year'

        mode_options = ['year', 'month', 'week']
        try:
            mode_index = mode_options.index(st.session_state.standard_analysis_mode)
        except ValueError:
            mode_index = 0
            st.session_state.standard_analysis_mode = mode_options[0]

        mode = st.selectbox(
            get_text('select_analysis_mode'),
            options=mode_options,
            index=mode_index,
            key='standard_mode_tab'
        )
        st.session_state.standard_analysis_mode = mode # Update state

    with col2_std:
        # State management for standard selected year
        if 'standard_selected_year' not in st.session_state:
            st.session_state.standard_selected_year = config_data['year'] if config_data['year'] in all_years else (all_years[0] if all_years else None)
        
        default_std_year_index = 0
        if st.session_state.standard_selected_year in all_years:
            default_std_year_index = all_years.index(st.session_state.standard_selected_year)
        elif all_years:
            st.session_state.standard_selected_year = all_years[0] # Fallback
            default_std_year_index = 0
        elif st.session_state.standard_selected_year is None: # No years available at all
            default_std_year_index = None


        selected_year = st.selectbox(
            get_text('select_year'),
            options=all_years,
            index=default_std_year_index,
            key='standard_year_tab'
        )
        st.session_state.standard_selected_year = selected_year # Update state

        if selected_year is None:
            st.warning(get_text('no_year_in_data'))

    with col3_std:
        # State management for standard selected months
        if 'standard_selected_months' not in st.session_state:
            st.session_state.standard_selected_months = config_data['months'] if config_data['months'] else all_months
        
        # Ensure default months are valid in current all_months
        valid_default_months = [m for m in st.session_state.standard_selected_months if m in all_months]
        if not valid_default_months and all_months: # Fallback if no valid default or if default is empty but options exist
            valid_default_months = all_months # Select all months as default if nothing is selected

        selected_months = st.multiselect(
            get_text('select_months'),
            options=all_months,
            default=valid_default_months,
            key='standard_months_tab'
        )
        st.session_state.standard_selected_months = selected_months # Update state


    st.subheader(get_text('standard_project_selection_header'))

    # Determine initial included projects based on config for default
    initial_included_projects_config = config_data['project_filter_df'][
        config_data['project_filter_df']['Include'].astype(str).str.lower() == 'yes'
    ]['Project Name'].tolist()

    # State management for standard project selection
    if 'standard_selected_projects' not in st.session_state:
        default_standard_projects = [p for p in initial_included_projects_config if p in all_projects]
        if not default_standard_projects and all_projects:
            default_standard_projects = all_projects # Default to all if config is empty
        st.session_state.standard_selected_projects = default_standard_projects

# üü© H·ªó tr·ª£ ch·ªçn t·∫•t c·∫£ d·ª± √°n
    select_all_std_projects = st.checkbox(get_text("select_all_projects_checkbox"), value=True, key="select_all_std_projects_checkbox")

    if select_all_std_projects:
        standard_project_selection = all_projects
    else:
        current_std_projects_default = [p for p in st.session_state.standard_selected_projects if p in all_projects]
        if not current_std_projects_default and all_projects:
            current_std_projects_default = all_projects
        # ‚úÖ Ch√®n d√≤ng hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ƒëang ch·ªçn
        st.caption(f"ƒêang ch·ªçn {len(current_std_projects_default)} d·ª± √°n")
        
        standard_project_selection = st.multiselect(
            get_text('standard_project_selection_text'),
            options=all_projects,
            default=current_std_projects_default,
            key='standard_project_selection_tab'
        )
        # ‚úÖ CH·ªà c·∫≠p nh·∫≠t n·∫øu c√≥ thay ƒë·ªïi ‚Üí tr√°nh Streamlit reload v√¥ √≠ch
    if st.session_state.standard_selected_projects != standard_project_selection:
        st.session_state.standard_selected_projects = standard_project_selection
        
    st.markdown("---")
    st.subheader(get_text("export_options"))
    export_excel = st.checkbox(get_text("export_excel_option"), value=True, key='export_excel_std')
    export_pdf = st.checkbox(get_text("export_pdf_option"), value=False, key='export_pdf_std')

    if st.button(get_text('generate_standard_report_btn'), key='generate_standard_report_btn_tab'):
        if not export_excel and not export_pdf:
            st.warning(get_text("warning_select_export_format"))
        elif selected_year is None:
            st.error(get_text('no_year_selected_error'))
        elif not standard_project_selection:
            st.warning(get_text('no_project_selected_warning_standard'))
        else:
            temp_project_filter_df_standard = pd.DataFrame({
                'Project Name': standard_project_selection,
                'Include': ['yes'] * len(standard_project_selection)
            })

            standard_report_config = {
                'mode': mode,
                'year': selected_year,
                'months': selected_months,
                'project_filter_df': temp_project_filter_df_standard
            }

            df_filtered_standard = apply_filters(df_raw, standard_report_config)
            # T·ª± ƒë·ªông lo·∫°i b·ªè d·ª± √°n kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc
            project_col = 'Project name'  # <-- ƒê√∫ng t√™n c·ªôt trong df_raw, s·ª≠a n·∫øu c·∫ßn
            valid_projects_in_filtered = df_filtered_standard[project_col].unique().tolist()

            # Gi·ªØ l·∫°i c√°c d·ª± √°n c√≥ d·ªØ li·ªáu
            standard_project_selection = [p for p in standard_project_selection if p in valid_projects_in_filtered]

            # N·∫øu kh√¥ng c√≤n d·ª± √°n n√†o h·ª£p l·ªá, c·∫£nh b√°o v√† d·ª´ng
            if not standard_project_selection:
                st.warning("Kh√¥ng c√≥ d·ª± √°n n√†o c√≥ d·ªØ li·ªáu trong nƒÉm v√† th√°ng ƒë√£ ch·ªçn.")
                st.stop()

            # C·∫≠p nh·∫≠t l·∫°i config v√† project_filter_df
            temp_project_filter_df_standard = pd.DataFrame({
                'Project Name': standard_project_selection,
                'Include': ['yes'] * len(standard_project_selection)
            })
            standard_report_config['project_filter_df'] = temp_project_filter_df_standard
            if 'Date' in df_filtered_standard.columns:
                df_filtered_standard['MonthName'] = pd.to_datetime(df_filtered_standard['Date']).dt.strftime('%B')
            if df_filtered_standard.empty:
                st.warning(get_text('no_data_after_filter_standard'))
            else:
                # üëá CH·ªà TH√äM PH·∫¶N N√ÄY
                st.subheader(get_text("preview_charts_title"))  # v√≠ d·ª•: "üìä Bi·ªÉu ƒë·ªì xem tr∆∞·ªõc"
                fig_monthly = create_monthly_chart(df_filtered_standard, standard_report_config)
                if fig_monthly:
                    st.plotly_chart(fig_monthly, use_container_width=True)

                fig_task = create_task_chart(df_filtered_standard, standard_report_config)
                if fig_task:
                    st.plotly_chart(fig_task, use_container_width=True)

                fig_workcentre = create_workcentre_chart(df_filtered_standard, standard_report_config)
                if fig_workcentre:
                    st.plotly_chart(fig_workcentre, use_container_width=True)
                    
                fig_hierarchy = create_hierarchy_chart(df_filtered_standard, standard_report_config)
                if fig_hierarchy:
                    st.plotly_chart(fig_hierarchy, use_container_width=True)
                st.markdown("---")
                
                today_str = datetime.today().strftime("%Y-%m-%d")  # ‚úÖ ƒê√∫ng c√∫ ph√°p
                path_dict = {                                        # ‚úÖ B·ªï sung c·∫ßn thi·∫øt
                'output_file': f'outputs/standard/Time_report_Standard_{today_str}.xlsx',
                'pdf_report': f'outputs/standard/Time_report_Standard_{today_str}.pdf',
                'logo_path': 'triac_logo.png'
                } 
                report_generated = False
                if export_excel:
                    with st.spinner(get_text('generating_excel_report')):
                        excel_success = export_report(df_filtered_standard, standard_report_config, path_dict['output_file'])
                    if excel_success:
                        st.success(get_text('excel_report_generated').format(os.path.basename(path_dict['output_file'])))
                        report_generated = True
                    else:
                        st.error(get_text('failed_to_generate_excel'))
                if export_pdf:
                    pdf_report_path = path_dict['pdf_report']  # ‚úÖ th√™m d√≤ng n√†y tr∆∞·ªõc khi d√πng bi·∫øn
                    # ‚úÖ Ki·ªÉm tra tr∆∞·ªõc khi g·ªçi
                    if not pdf_report_path:
                        raise ValueError("‚ùå pdf_report_path is empty. Please check where it's defined.")
                    with st.spinner(get_text('generating_pdf_report')):
                        print(f"[DEBUG] path_dict['pdf_report'] = {path_dict['pdf_report']}")
                        pdf_success = export_pdf_report(df_filtered_standard, standard_report_config, path_dict['pdf_report'], path_dict['logo_path'])
                    if pdf_success:
                        st.success(get_text('pdf_report_generated').format(os.path.basename(path_dict['pdf_report'])))
                        report_generated = True
                    else:
                        st.error(get_text('failed_to_generate_pdf'))

                if report_generated:
                    if export_excel and os.path.exists(path_dict['output_file']):
                        with open(path_dict['output_file'], "rb") as f:
                            st.download_button(get_text("download_excel"), data=f, file_name=os.path.basename(path_dict['output_file']), use_container_width=True, key='download_excel_std_btn')
                    if export_pdf and os.path.exists(path_dict['pdf_report']):
                        with open(path_dict['pdf_report'], "rb") as f:
                            st.download_button(get_text("download_pdf"), data=f, file_name=os.path.basename(path_dict['pdf_report']), use_container_width=True, key='download_pdf_std_btn')
                else:
                    st.error(get_text('error_generating_report'))


# =========================================================================
# COMPARISON REPORT TAB
# =========================================================================
with tab_comparison_report_main:
    st.header(get_text('comparison_report_header'))

    # Define the mapping from text key to (Vietnamese_internal_string, English_internal_string)
    # This ensures the correct internal string is passed to backend, regardless of UI language
    internal_comparison_modes_map = {
        'compare_projects_month': ("So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng", "Compare Projects in a Month"),
        'compare_projects_year': ("So S√°nh D·ª± √Ån Trong M·ªôt NƒÉm", "Compare Projects in a Year"),
        'compare_projects_over_time': ("So S√°nh Nhi·ªÅu D·ª± √Ån Qua C√°c Th√°ng/NƒÉm", "Compare Projects Over Time (Months/Years)")
    }
    current_language = st.session_state.get("lang", "vi")
    # L·∫•y danh s√°ch display_name t√πy ng√¥n ng·ªØ
    comparison_mode_display_options = [
        vi if current_language == 'vi' else en
        for (_, (vi, en)) in internal_comparison_modes_map.items()
    ]

    # T·∫°o map t·ª´ display ‚Üí internal
    display_to_internal_map = {
        (vi if current_language == 'vi' else en): key
        for key, (vi, en) in internal_comparison_modes_map.items()
    }
    # L·∫•y gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ session
    default_key = st.session_state.get('selected_comparison_mode_key', list(internal_comparison_modes_map.keys())[0])
    vi_val, en_val = internal_comparison_modes_map[default_key]
    default_display = vi_val if current_language == 'vi' else en_val

    try:
        current_index = comparison_mode_display_options.index(default_display)
    except ValueError:
        # Gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√¥ng t√¨m th·∫•y trong options hi·ªán t·∫°i, fallback v·ªÅ ƒë·∫ßu ti√™n
        current_index = 0
        default_key = list(internal_comparison_modes_map.keys())[0]
        st.session_state.selected_comparison_mode_key = default_key
        default_display = get_text(default_key)  # c·∫≠p nh·∫≠t l·∫°i display n·∫øu fallback
    # Hi·ªÉn th·ªã selectbox (d√πng ch√≠nh session key ƒë·ªÉ gi·ªØ ƒë·ªìng b·ªô)
    selected_display = st.selectbox(
        get_text('comparison_mode_label'),
        options=comparison_mode_display_options,
    )

    # Chuy·ªÉn l·∫°i th√†nh key n·ªôi b·ªô
    comparison_mode_selected = display_to_internal_map[selected_display]
    # D·ª±a tr√™n key ƒë√£ l∆∞u v√† ng√¥n ng·ªØ hi·ªán t·∫°i
    vi_val, en_val = internal_comparison_modes_map[comparison_mode_selected]
    comparison_mode = vi_val if st.session_state.lang == 'vi' else en_val
    
    st.subheader(get_text('filter_data_for_comparison'))
    # Display options v√† mapping display ‚Üí internal
    if st.session_state.lang == 'vi':
        filter_mode_display_options = ["Theo T·ªïng Gi·ªù", "Theo Task", "Theo Workcentre"]
    else:
        filter_mode_display_options = ["By Total hour", "By Task", "By Workcentre"]

    # ‚úÖ Map display string ‚Üí internal string
    display_to_internal = {
        "Theo T·ªïng Gi·ªù": "Total",
        "Theo Task": "Task",
        "Theo Workcentre": "Workcentre",
        "By Total hour": "Total",
        "By Task": "Task",
        "By Workcentre": "Workcentre"
    }

    # L·∫•y gi√° tr·ªã hi·ªán t·∫°i t·ª´ session ho·∫∑c m·∫∑c ƒë·ªãnh
    current_display = st.session_state.get("selected_filter_display", filter_mode_display_options[0])
    
    # ‚úÖ Fallback n·∫øu kh√¥ng h·ª£p l·ªá sau khi ƒë·ªïi ng√¥n ng·ªØ
    if current_display not in filter_mode_display_options:
        current_display = filter_mode_display_options[0]
        st.session_state.selected_filter_display = current_display
        st.session_state.selected_filter_mode = display_to_internal[current_display]

    # Hi·ªÉn th·ªã selectbox
    selected_filter_display = st.selectbox(
        "Comparison filter mode",
        options=filter_mode_display_options,
        index=filter_mode_display_options.index(current_display),
        key="filter_mode_selectbox"
    )

    # N·∫øu ng∆∞·ªùi d√πng thay ƒë·ªïi l·ª±a ch·ªçn
    if selected_filter_display != current_display:
        st.session_state.selected_filter_display = selected_filter_display
        st.session_state.selected_filter_mode = display_to_internal[selected_filter_display]

      # ‚úÖ Lu√¥n l·∫•y filter_mode (chu·∫©n h√≥a) t·ª´ session
    filter_mode = st.session_state.get("selected_filter_mode", display_to_internal[current_display])

    # State management for comparison projects
    if 'comparison_selected_projects' not in st.session_state:
        st.session_state.comparison_selected_projects = [] # Default to empty
    # ƒê·∫∑t ·ªü ƒë√¢y, tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ki·ªÉm tra t·ª´ng ch·∫ø ƒë·ªô
    validation_error = False

    # L∆∞u tr·∫°ng th√°i checkbox ch·ªçn t·∫•t c·∫£
    if "select_all_projects_checkbox" not in st.session_state:
        st.session_state.select_all_projects_checkbox = True

    select_all_projects = st.checkbox(
        get_text("select_all_projects_checkbox"),
        value=st.session_state.select_all_projects_checkbox,
        key="select_all_projects_checkbox"
    )

    # Reset ho·∫∑c c·∫≠p nh·∫≠t danh s√°ch project ƒë√£ ch·ªçn
    if select_all_projects:
        comp_projects = all_projects  # ‚úÖ G√°n v√†o bi·∫øn comp_projects
        if st.session_state.comparison_selected_projects != all_projects:
            st.session_state.comparison_selected_projects = all_projects
    else:
        comp_projects = st.multiselect(
            get_text('select_projects_comp'),
            options=all_projects,
            default=st.session_state.comparison_selected_projects,
            key='comp_projects_select_tab_common'
        )
        if comp_projects != st.session_state.comparison_selected_projects:
            st.session_state.comparison_selected_projects = comp_projects

    if comparison_mode == "So S√°nh Nhi·ªÅu D·ª± √Ån Qua C√°c Th√°ng/NƒÉm" or comparison_mode == "Compare Projects Over Time (Months/Years)":
        if len(comp_projects) < 1:
            st.warning(get_text('no_project_selected_warning_standard'))  # b√°o l·ªói n·∫øu kh√¥ng ch·ªçn g√¨
            validation_error = True

        # State management for selected years in "Over Time" mode
        if 'comparison_selected_years_over_time' not in st.session_state:
            st.session_state.comparison_selected_years_over_time = []

        selected_years_over_time = st.multiselect(
            get_text('select_years_for_over_time_months'),
            options=all_years,
            default=st.session_state.comparison_selected_years_over_time,
            key='comp_years_select_tab_over_time'
        )
        if selected_years_over_time != st.session_state.comparison_selected_years_over_time:
            st.session_state.comparison_selected_years_over_time = selected_years_over_time
        comp_years = selected_years_over_time # Assign to comp_years for config

        # State management for selected months in "Over Time" mode (if single year selected)
        if 'comparison_selected_months_over_time' not in st.session_state:
            st.session_state.comparison_selected_months_over_time = []


        if len(selected_years_over_time) == 1:
            st.info(get_text('comparison_over_months_note').format(selected_years_over_time[0]))
            comp_months = st.multiselect(
                get_text('select_months_for_single_year'),
                options=all_months,
                default=[m for m in st.session_state.comparison_selected_months_over_time if m in all_months], # Ensure default is valid
                key='comp_months_select_tab_over_time'
            )
            st.session_state.comparison_selected_months_over_time = comp_months # Update state

            if not comp_months:
                st.warning(get_text('no_month_selected_for_single_year'))
                validation_error = True

        elif len(selected_years_over_time) > 1:
            st.info(get_text('comparison_over_years_note'))
            comp_months = [] # Months are ignored for multi-year comparison
            st.session_state.comparison_selected_months_over_time = [] # Clear months state
        else:
            st.warning(get_text('no_comparison_criteria_selected'))
            validation_error = True
            comp_months = [] # Ensure empty
            st.session_state.comparison_selected_months_over_time = [] # Clear months state

    elif comparison_mode in ["So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng", "Compare Projects in a Month", "So S√°nh D·ª± √Ån Trong M·ªôt NƒÉm", "Compare Projects in a Year"]:
        col_comp1, col_comp2 = st.columns(2)
        with col_comp1:
            # State management for general comparison years
            if 'comparison_selected_years_general' not in st.session_state:
                st.session_state.comparison_selected_years_general = []

            comp_years = st.multiselect(
                get_text('select_years'),
                options=all_years,
                default=[y for y in st.session_state.comparison_selected_years_general if y in all_years],
                key='comp_years_select_tab_general'
            )
            st.session_state.comparison_selected_years_general = comp_years # Update state

        with col_comp2:
            # State management for general comparison months
            if 'comparison_selected_months_general' not in st.session_state:
                st.session_state.comparison_selected_months_general = []

            if comparison_mode in ["So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng", "Compare Projects in a Month"]:
                comp_months = st.multiselect(
                    get_text('select_months_comp'),
                    options=all_months,
                    default=[m for m in st.session_state.comparison_selected_months_general if m in all_months],
                    key='comp_months_select_tab_general'
                )
                st.session_state.comparison_selected_months_general = comp_months # Update state
            else:
                comp_months = [] # Months are not relevant for yearly comparison
                st.session_state.comparison_selected_months_general = [] # Clear months state

        if not comp_years:
            st.warning(get_text('no_comparison_criteria_selected'))
            validation_error = True
        
        if comparison_mode in ["So S√°nh D·ª± √Ån Trong M·ªôt Th√°ng", "Compare Projects in a Month"] and not comp_months:
            st.warning(get_text('no_comparison_criteria_selected'))
            validation_error = True

        if not comp_projects:
            st.warning(get_text('no_project_selected_warning_standard')) # Reusing standard report message
            validation_error = True
            

    st.markdown("---")
    st.subheader(get_text("export_options"))
    export_excel_comp = st.checkbox(get_text("export_excel_option"), value=True, key='export_excel_comp')
    export_pdf_comp = st.checkbox(get_text("export_pdf_option"), value=False, key='export_pdf_comp')

    if st.button(get_text('generate_comparison_report_btn'), key='generate_comparison_report_btn_tab'):
        if not export_excel_comp and not export_pdf_comp:
            st.warning(get_text("warning_select_export_format"))
        elif validation_error:
            # Error messages already displayed by specific conditions
            pass
        else:
            # DEBUG print statements (gi·ªØ l·∫°i ƒë·ªÉ ch·∫©n ƒëo√°n v·∫•n ƒë·ªÅ d·ª± √°n)
            print(f"DEBUG: Comparison Mode selected before filter: {comparison_mode}")
            print(f"DEBUG: Selected Projects before filter: {comp_projects}")
            print(f"DEBUG: Selected Years before filter: {comp_years}")
            print(f"DEBUG: Selected Months before filter: {comp_months}")


            comparison_config = {
                'years': comp_years,
                'months': comp_months,
                'selected_projects': comp_projects,
                'filter_mode': filter_mode   # ‚úÖ TH√äM D√íNG N√ÄY
                # 'selected_months_over_time' kh√¥ng c·∫ßn truy·ªÅn ri√™ng n·∫øu ƒë√£ g√°n v√†o comp_months
                # n√≥ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong logic tr√™n
            }
            print("‚úÖ DEBUG - comparison_config:", comparison_config)
            # Print the final config before calling the function
            comparison_output_folder = "outputs/comparison"
            comparison_path_dict = path_dict.copy()  # path_dict ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr∆∞·ªõc ƒë√≥ ·ªü ƒë·∫ßu ch∆∞∆°ng tr√¨nh
            # Th√™m c√°c key cho b√°o c√°o so s√°nh
            comparison_path_dict.update({
                "comparison_output_excel": os.path.join(comparison_output_folder, "comparison_result.xlsx"),
                "comparison_output_file": os.path.join(comparison_output_folder, "comparison_export.xlsx"),
                "comparison_pdf_output": os.path.join(comparison_output_folder, "comparison_chart.png"),
                "comparison_pdf_report": os.path.join(comparison_output_folder, "comparison_report.pdf"),
                "logo": path_dict["logo_path"]  # ‚úÖ ƒë·∫£m b·∫£o t·ªìn t·∫°i
            })
            print(f"DEBUG: Final comparison_config sent to filter: {comparison_config}")
            print(f"DEBUG: comparison_path_dict = {comparison_path_dict}")
            # ‚úÖ Th√™m d√≤ng n√†y sau khi path_dict ƒë√£ t·∫°o
            # √Åp d·ª•ng filter
            df_filtered_comparison, comparison_filter_message, filtered_projects = apply_comparison_filters(
            df_raw, comparison_config, comparison_mode, filter_mode
            )
            # ‚úÖ C·∫£nh b√°o n·∫øu c√≥ d·ª± √°n ƒë∆∞·ª£c ch·ªçn nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø
            original_projects = comparison_config.get("selected_projects", [])
            if len(filtered_projects) < len(original_projects):
                removed = set(original_projects) - set(filtered_projects)
                st.warning(f"‚ö†Ô∏è M·ªôt s·ªë d·ª± √°n kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø v√† ƒë√£ b·ªã lo·∫°i kh·ªèi b√°o c√°o: {', '.join(removed)}")

            if df_filtered_comparison.empty:
                # ƒê·∫£m b·∫£o th∆∞ m·ª•c ch·ª©a file output t·ªìn t·∫°i
                for key in ["comparison_output_excel", "comparison_pdf_output", "comparison_output_file", "comparison_pdf_report"]:
                    folder = os.path.dirname(comparison_path_dict[key])
                    if folder:
                        os.makedirs(folder, exist_ok=True)

                st.warning(get_text('no_data_after_filter_comparison').format(comparison_filter_message))
            else:
                st.success(get_text('data_filtered_success'))
                st.subheader(get_text('comparison_data_preview'))
                st.dataframe(df_filtered_comparison)
                # üëá Th√™m bi·ªÉu ƒë·ªì xem tr∆∞·ªõc (d√πng plotly)
                st.subheader(get_text("preview_charts_title"))  # üìä Bi·ªÉu ƒë·ªì xem tr∆∞·ªõc

                fig_monthly = create_monthly_chart(df_filtered_comparison, comparison_config)
                if fig_monthly:
                    st.plotly_chart(fig_monthly, use_container_width=True)

                fig_task = create_task_chart(df_filtered_comparison, comparison_config)
                if fig_task:
                    st.plotly_chart(fig_task, use_container_width=True)

                fig_workcentre = create_workcentre_chart(df_filtered_comparison, comparison_config)
                if fig_workcentre:
                    st.plotly_chart(fig_workcentre, use_container_width=True)
                    
                if 'df_filtered_comparison' in locals():
                    fig_hierarchy = create_hierarchy_chart(df_filtered_comparison, comparison_config)
                    if fig_hierarchy:
                        st.plotly_chart(fig_hierarchy, use_container_width=True)
                st.markdown("---")

                report_generated_comp = False
                if export_excel_comp:
                    with st.spinner(get_text('generating_comparison_excel')):
                        try:
                            excel_success_comp = export_comparison_report(
                                df_filtered_comparison,
                                comparison_config,
                                comparison_path_dict['comparison_output_file'],
                                comparison_mode,
                                filter_mode
                                )
                        except Exception as e:
                            excel_success_comp = False
                            st.error(f"‚ùå L·ªói khi xu·∫•t Excel: {e}")
                    # ‚úÖ Ki·ªÉm tra file c√≥ th·ª±c s·ª± ƒë∆∞·ª£c t·∫°o ra kh√¥ng
                    if os.path.exists(comparison_path_dict['comparison_output_file']):
                        st.success("‚úÖ File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o ƒë√∫ng t·∫°i: " + comparison_path_dict['comparison_output_file'])
                        report_generated_comp = True
                    else:
                        st.error("‚ùå File Excel KH√îNG ƒë∆∞·ª£c t·∫°o ra: " + comparison_path_dict['comparison_output_file'])
                        st.code("Current working directory: " + os.getcwd(), language="text")
                        st.code("Expected path: " + os.path.abspath(comparison_path_dict['comparison_output_file']), language="text")
                    if excel_success_comp:
                        st.success(get_text('comparison_excel_generated').format(os.path.basename(comparison_path_dict['comparison_output_file'])))
                        report_generated_comp = True
                    else:
                        st.error(get_text('failed_to_generate_comparison_excel'))

                if export_pdf_comp:
                    with st.spinner(get_text('generating_comparison_pdf')):
                        try:
                            pdf_path = comparison_path_dict['comparison_pdf_report']
                            print("‚ñ∂Ô∏è G·ªçi export_comparison_pdf_report...")
                            pdf_success_comp = export_comparison_pdf_report(
                                df_filtered_comparison,
                                comparison_config,
                                pdf_path,
                                comparison_mode,
                                comparison_path_dict['logo'],                   # ‚úÖ th√™m logo_path
                                filter_mode
                            )
                            print("‚úÖ PDF Success?", pdf_success_comp)
                            print("üìÅ File t·ªìn t·∫°i?", os.path.exists(pdf_path))
                        except Exception as e:
                            pdf_success_comp = False
                            st.error(f"‚ùå L·ªói khi xu·∫•t PDF: {e}")
                            print("‚ùå Exception khi xu·∫•t PDF:", e)
                    if pdf_success_comp:
                        st.success(get_text('comparison_pdf_generated').format(os.path.basename(comparison_path_dict['comparison_pdf_report'])))
                        report_generated_comp = True
                    else:
                        st.error(get_text('failed_to_generate_comparison_pdf'))
                        st.warning(f"‚ö†Ô∏è PDF kh√¥ng ƒë∆∞·ª£c t·∫°o t·∫°i: {pdf_path}")
                
                if report_generated_comp:
                # ======= HI·ªÜN N√öT T·∫¢I PDF/EXCEL SAU KHI XU·∫§T =========
                    with st.expander("üì• T·∫£i b√°o c√°o PDF/Excel so s√°nh"):
                        st.write("ü™µ DEBUG path dict:", comparison_path_dict)

                        excel_path = comparison_path_dict.get("comparison_output_file")
                        pdf_path = comparison_path_dict.get("comparison_pdf_report")
                        # ‚¨áÔ∏è T·∫£i Excel
                        if export_excel_comp and excel_path and os.path.exists(excel_path):
                            with open(excel_path, "rb") as f_excel:
                                excel_data = f_excel.read()  # ‚úÖ ƒë·ªçc n·ªôi dung
                            st.download_button(
                                label="üìÑ T·∫£i Excel So s√°nh",
                                data=excel_data,
                                file_name=os.path.basename(comparison_path_dict["comparison_output_file"]),
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True,
                                key="exp_excel_comp_btn"
                            )
                        else:
                            st.warning(f"‚ö†Ô∏è File Excel kh√¥ng t·ªìn t·∫°i: {excel_path}")
                        # ‚¨áÔ∏è T·∫£i PDF
                        if export_pdf_comp and pdf_path and os.path.exists(pdf_path):
                            with open(pdf_path, "rb") as f_pdf:
                                pdf_data = f_pdf.read()  # ‚úÖ ƒë·ªçc n·ªôi dung
                            st.download_button(
                                label="üñ®Ô∏è T·∫£i PDF So s√°nh",
                                data=pdf_data,
                                file_name=os.path.basename(comparison_path_dict["comparison_pdf_report"]),
                                mime="application/pdf",
                                use_container_width=True,
                                key="exp_pdf_comp_btn"        
                            )
                        else:
                            st.warning(f"‚ö†Ô∏è File PDF kh√¥ng t·ªìn t·∫°i: {pdf_path}")
                else:
                    st.error(get_text("‚ö†Ô∏è error_generating_report"))
# =========================================================================
# DATA PREVIEW TAB
# =========================================================================
with tab_data_preview_main:
    st.subheader(get_text('raw_data_preview_header'))
    if not df_raw.empty:
        st.dataframe(df_raw.head(100))
    else:
        st.info(get_text('no_raw_data'))

# =========================================================================
# USER GUIDE TAB
# =========================================================================
with tab_user_guide_main:
    st.markdown(f"### {get_text('user_guide')}")
    st.markdown("""
    - Select filters: mode, year, month, project
    - Select report export format (Excel, PDF or both)
    - Click "Create report"
    - Download generated report
    """)

    # üëá Th√™m ƒëo·∫°n n√†y ƒë·ªÉ xem access log (n·∫øu c√≥)
    if "access_log" in st.session_state:
        st.write("üìú Current session access log:")
        st.dataframe(pd.DataFrame(st.session_state.access_log))
# HELP TAB
# =========================================================================
with tab_help_main:
    lang = st.session_state.get("lang", "vi")

    st.markdown(f"### {get_text('tab_help', lang)}")
    st.markdown(get_text("help_instruction_simple", lang))
    
with tab_dashboard_main:
    st.subheader("üìä Quick Overview")

    today = datetime.today()
    current_year = today.year
    current_month = today.strftime('%B')
    current_week = today.isocalendar()[1]

    def get_week_date_range(year, week_num):
        d = datetime.strptime(f'{year}-W{week_num}-1', "%Y-W%W-%w")  # Monday
        start_date = d.strftime('%d/%m')
        end_date = (d + timedelta(days=6)).strftime('%d/%m')
        return f"Week {week_num} ({start_date} ‚Üí {end_date})"

    available_weeks = sorted(
        df[(df['Year'] == current_year) & (df['MonthName'] == current_month)]['Week'].unique()
    )
    week_labels = {w: get_week_date_range(current_year, w) for w in available_weeks}

    selected_week_num = st.selectbox(
        "üóìÔ∏è Select a week in the current month",
        options=available_weeks,
        format_func=lambda x: week_labels.get(x, f"Week {x}"),
        index=len(available_weeks) - 1
    )

    df_week = df[(df['Year'] == current_year) & (df['Week'] == selected_week_num)]
    df_month = df[(df['Year'] == current_year) & (df['MonthName'] == current_month)]

    total_hours_week = df_week['Hours'].sum()
    total_hours_month = df_month['Hours'].sum()

    col1, col2 = st.columns(2)
    with col1:
        st.metric("üóìÔ∏è Total Weekly Hours", f"{total_hours_week:.1f}h")
    with col2:
        st.metric("üìÜ Total Monthly Hours", f"{total_hours_month:.1f}h")

    top_projects = (
        df_week.groupby("Project name")["Hours"]
        .sum()
        .sort_values(ascending=False)
        .head(5)
        .reset_index()
    )
    fig1 = px.bar(
        top_projects, x="Project name", y="Hours", color="Project name",
        title="üîù Top 5 Projects by Hours", template="plotly_white"
    )
    st.plotly_chart(fig1, use_container_width=True)

    team_ratio = df_week.groupby("Workcentre")["Hours"].sum().reset_index()
    fig2 = px.pie(
        team_ratio, names="Workcentre", values="Hours",
        title="üß© Hour Distribution by Team", template="plotly_white"
    )
    st.plotly_chart(fig2, use_container_width=True)

    team_project = df_week.groupby(["Project name", "Workcentre"])["Hours"].sum().reset_index()
    fig3 = px.bar(
        team_project, x="Project name", y="Hours", color="Workcentre",
        title="üèóÔ∏è Team Allocation by Project", template="plotly_white"
    )
    st.plotly_chart(fig3, use_container_width=True)

    # üîΩ Ph√¢n t√≠ch ph√¢n c·∫•p
    st.markdown("---")
    st.subheader("üß≠ Hierarchical Analysis (Project ‚Üí Workcentre ‚Üí Task ‚Üí Job)")

    df_hierarchy_base = df_week if not df_week.empty else df_month

    if all(col in df_hierarchy_base.columns for col in ['Project name', 'Workcentre', 'Task', 'Job', 'Hours']):
        fig_hierarchy = create_hierarchy_chart(df_hierarchy_base)
        if fig_hierarchy:
            st.plotly_chart(fig_hierarchy, use_container_width=True)
    else:
        st.info("‚ö†Ô∏è Not enough data to display hierarchy chart (columns required: Project name, Workcentre, Task, Job, Hours)")
